name: Cleanup Old News Folders

on:
  schedule:
    # Run daily at midnight
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
    - name: Remove outdated folders via GitHub API
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        REPO: ${{ github.repository }}
      run: |
        # Define the cutoff date (7 days ago)
        CUTOFF_DATE=$(date -u -d "7 days ago" +%Y-%m-%dT%H:%M:%SZ)

        # Get the list of folders in the 'News' directory
        FOLDERS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$REPO/contents/News" | jq -r '.[] | select(.type == "dir") | .path')

        for FOLDER in $FOLDERS; do
          echo "Checking folder: $FOLDER"

          # Get the latest commit for the folder
          COMMITS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/commits?path=$FOLDER&per_page=1")

          if ! LAST_COMMIT_DATE=$(echo "$COMMITS_RESPONSE" | jq -r '.[0].commit.author.date' 2>/dev/null); then
            echo "Error parsing commits response for folder: $FOLDER"
            echo "Response: $COMMITS_RESPONSE"
            continue
          fi

          if [[ -z "$LAST_COMMIT_DATE" || "$LAST_COMMIT_DATE" == "null" ]]; then
            echo "No commits found for folder: $FOLDER. Skipping..."
            continue
          fi

          # Compare the last commit date with the cutoff date
          if [[ "$LAST_COMMIT_DATE" < "$CUTOFF_DATE" ]]; then
            echo "Folder $FOLDER is outdated (last modified: $LAST_COMMIT_DATE). Deleting..."

            # Delete all files in the folder
            FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/contents/$FOLDER" | jq -r '.[].path')

            for FILE in $FILES; do
              FILE_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$REPO/contents/$FILE")

              if ! FILE_SHA=$(echo "$FILE_DETAILS" | jq -r '.sha' 2>/dev/null); then
                echo "Error parsing file details for: $FILE"
                echo "Response: $FILE_DETAILS"
                continue
              fi

              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d '{"message": "Delete outdated file", "sha": "'$FILE_SHA'"}' \
                "https://api.github.com/repos/$REPO/contents/$FILE"
              echo "Deleted file: $FILE"
            done

            echo "Deleted folder: $FOLDER"
          else
            echo "Folder $FOLDER is up to date (last modified: $LAST_COMMIT_DATE)."
          fi
        done
